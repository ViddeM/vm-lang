use crate::core_types::{Program, Statement, Identifier, Expression, ComparisonOperator, Type, Argument, Function};

grammar;

match {
    "fn" => FN,
    "let" => LET,
    r"false" => FALSE,
    r"true" => TRUE,
    r"while" => WHILE,
    r"if" => IF,
    r"else" => ELSE,
    r"int" => INT,
    r"bool" => BOOL,
    r"return" => RETURN,
    "(",
    ")",
    "{",
    "}",
    "==",
    "!=",
    "<=",
    ">=",
    "<",
    ">",
    "=",
    "+",
    "-",
    "*",
    "/",
    ",",
    ";",
    ":",
    "",
    r"[-]?\d+" => INTEGER,
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
} else {
    r"[a-zA-Z]([a-zA-Z0-9]|-|_)*" => ID,
}

pub Prgr: Program = {
    <funcs: Func*> => Program { functions: funcs },
}

Func: Function = {
    FN <id: Ident> "(" <args: Comma<Arg>> ")" ":" <ret: Type> "{" <stmts: Stmt*> "}" => Function {
        name: id,
        arguments: args,
        statements: stmts,
        return_type: ret,
    },
    FN <id: Ident> "(" <args: Comma<Arg>> ")" "{" <stmts: Stmt*> "}" => Function {
        name: id,
        arguments: args,
        statements: stmts,
        return_type: Type::Void,
    }
}

Arg: Argument = {
    <id: Ident> ":" <tp: Type> => Argument { name: id, t: tp },
}

Stmt: Statement = {
    LET <id: Ident> "=" <expr: Expr> ";" => Statement::Let(id, expr),
    WHILE <expr: Expr> "{" <stmts: Stmt*> "}" => Statement::While(expr, stmts),
    IF <expr: Expr> "{" <stmts: Stmt*> "}" => Statement::If(expr, stmts),
    IF <expr: Expr> "{" <stmts: Stmt*> "}" ELSE "{" <else_stmts: Stmt*> "}" => Statement::IfElse(expr, stmts, else_stmts),
    RETURN <expr: Expr> ";" => Statement::Return(Some(expr)),
    RETURN ";" => Statement::Return(None),
    <expr: Expr> ";" => Statement::Expression(expr),
}

Expr: Expression = {
    Assignment,
}

Assignment: Expression = {
    <var: Ident> "=" <expr: Assignment> => Expression::Assignment(var, Box::new(expr)),
    Comparison,
}

Comparison: Expression = {
    <a: Term> <op: CmpOp> <b: Term> => Expression::Comparison(Box::new(a), Box::new(b), op),
    Term,
}

Term: Expression = {
    <expa: Term> "+" <expb: Factor> => Expression::Plus(Box::new(expa), Box::new(expb)),
    <expa: Term> "-" <expb: Factor> => Expression::Minus(Box::new(expa), Box::new(expb)),
    Factor,
}

Factor: Expression = {
    <expa: Factor> "*" <expb: FunctionCall> => Expression::Times(Box::new(expa), Box::new(expb)),
    <expa: Factor> "/" <expb: FunctionCall> => Expression::Divide(Box::new(expa), Box::new(expb)),
    FunctionCall,
}

FunctionCall: Expression = {
    <name: Ident> "(" <args: Comma<Expr>> ")" => Expression::FunctionCall(String::from(name), args),
    Literal,
}

Literal: Expression = {
    FALSE => Expression::BooleanLiteral(false),
    TRUE => Expression::BooleanLiteral(true),
    <num: INTEGER> => Expression::IntegerLiteral(num.parse::<i64>().unwrap()),
    <var: Ident> => Expression::Variable(var),
    "(" <expr: Expr> ")" => expr,
}

Ident: Identifier = {
    <id: ID> => Identifier::from(id)
}

// Generic helper-rule for comma-separated lists (taken from github.com/algebraicdb/algebraicdb)
Comma<E>: Vec<E> =
    <v0:(<E> ",")*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();

CmpOp: ComparisonOperator = {
    "==" => ComparisonOperator::Equals,
    "!=" => ComparisonOperator::NotEquals,
    "<=" => ComparisonOperator::LessOrEqual,
    ">=" => ComparisonOperator::GreaterOrEqual,
    "<" => ComparisonOperator::LessThan,
    ">" => ComparisonOperator::GreaterThan,
}

Type: Type = {
    INT => Type::Integer,
    BOOL => Type::Boolean,
}